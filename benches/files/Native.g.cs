// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;

namespace GUI1
{
    public static unsafe partial class Native
    {
#if !UNITY_EDITOR && (UNITY_IOS || UNITY_SWITCH)
        const string __DllName = "__Internal";
#else
        const string __DllName = "GUI1Native";
#endif
        

        [DllImport(__DllName, EntryPoint = "rust_eh_personality", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void rust_eh_personality();

        [DllImport(__DllName, EntryPoint = "ui_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* ui_create();

        [DllImport(__DllName, EntryPoint = "ui_create_without_default_assets", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* ui_create_without_default_assets();

        [DllImport(__DllName, EntryPoint = "ui_clear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_clear(void* ui);

        [DllImport(__DllName, EntryPoint = "ui_set_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_set_size(void* ui, float w, float h);

        [DllImport(__DllName, EntryPoint = "ui_drop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_drop(void* ui);

        [DllImport(__DllName, EntryPoint = "ui_push_clip_rect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ClipRect ui_push_clip_rect(void* ui, XYXY rect, TBLR fade);

        [DllImport(__DllName, EntryPoint = "ui_load_circle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Sprite ui_load_circle(void* ui, float radius);

        [DllImport(__DllName, EntryPoint = "ui_load_sprite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Sprite ui_load_sprite(void* ui, byte* texture, nuint w, nuint h, nuint channels, [MarshalAs(UnmanagedType.U1)] bool srgb, TBLR borders);

        [DllImport(__DllName, EntryPoint = "ui_push_sprite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_push_sprite(void* ui, XYXY rect, Sprite sprite, RGBA color, ClipRect clip_rect);

        [DllImport(__DllName, EntryPoint = "ui_push_text_utf8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_push_text_utf8(void* ui, XY pos, byte* text, nuint len, Font font, float size, RGBA color, ClipRect clip_rect);

        [DllImport(__DllName, EntryPoint = "ui_push_text_utf16", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_push_text_utf16(void* ui, XY pos, ushort* text, nuint len, Font font, float size, RGBA color, ClipRect clip_rect);

        [DllImport(__DllName, EntryPoint = "ui_push_text_utf32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_push_text_utf32(void* ui, XY pos, uint* text, nuint len, Font font, float size, RGBA color, ClipRect clip_rect);

        [DllImport(__DllName, EntryPoint = "ui_prepare_to_render", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ui_prepare_to_render(void* ui, void* frame_data);

        [DllImport(__DllName, EntryPoint = "frame_data_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* frame_data_create();

        [DllImport(__DllName, EntryPoint = "frame_data_drop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void frame_data_drop(void* frame_data);

        [DllImport(__DllName, EntryPoint = "frame_data_get_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ByteSlice frame_data_get_index(void* frame_data);

        [DllImport(__DllName, EntryPoint = "frame_data_get_raw_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ByteSlice frame_data_get_raw_data(void* frame_data);

        [DllImport(__DllName, EntryPoint = "frame_data_get_index_capacity_in_bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint frame_data_get_index_capacity_in_bytes(void* frame_data);

        [DllImport(__DllName, EntryPoint = "frame_data_get_raw_data_capacity_in_bytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint frame_data_get_raw_data_capacity_in_bytes(void* frame_data);

        [DllImport(__DllName, EntryPoint = "frame_data_get_texture_delta", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern TextureDelta frame_data_get_texture_delta(void* frame_data);

        [DllImport(__DllName, EntryPoint = "frame_data_get_passes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Passes frame_data_get_passes(void* frame_data);

        [DllImport(__DllName, EntryPoint = "white", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern Sprite white();

        [DllImport(__DllName, EntryPoint = "no_clip", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ClipRect no_clip();

        [DllImport(__DllName, EntryPoint = "hide_everything", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ClipRect hide_everything();

        [DllImport(__DllName, EntryPoint = "validate_utf32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool validate_utf32(uint* text, nuint len);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct XY
    {
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct RGBA
    {
        public byte r;
        public byte g;
        public byte b;
        public byte a;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct XYXY
    {
        public float x0;
        public float y0;
        public float x1;
        public float y1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct TBLR
    {
        public float top;
        public float bottom;
        public float left;
        public float right;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct ByteSlice
    {
        public byte* ptr;
        public nuint len;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct TextureDelta
    {
        public nuint x;
        public nuint y;
        public nuint w;
        public nuint h;
        public ByteSlice data;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct Range
    {
        public nuint start;
        public nuint end;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct Pass
    {
        public nuint texture;
        public Range range;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct Passes
    {
        public Pass* ptr;
        public nuint len;
    }



}
    